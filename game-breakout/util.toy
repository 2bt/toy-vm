func min(a, b)
    if a < b then return a end
    return b
end
func max(a, b)
    if a > b then return a end
    return b
end
func clamp(x, a, b)
    if x < a then return a end
    if x > b then return b end
    return x
end
func abs(x)
    if x >= 0 then return x end
    return -x
end

func sqrt(n)
    if n == 0 or n == 1 then return n end
    var x = n
    var y = (x + n / x) / 2
    while y < x do
        x = y
        y = (x + n / x) / 2
    end
    return x
end

var int_to_str_buf: int[10]

func int_to_str(n): int*
    if n == 0 then
        int_to_str_buf[0] = 48
        int_to_str_buf[1] = 0
    else
        var p: int* = int_to_str_buf.ptr
        if n < 0 then
            p@ = 45     # sign
            p += 1
            n *= -1
        end
        var q = p
        while n do
            p@ = n % 10 + 48
            n /= 10
            p += 1
        end
        p@ = 0
        p -= 1
        while q < p do
            n = p@
            p@ = q@
            q@ = n
            p -= 1
            q += 1
        end
    end
    return int_to_str_buf.ptr
end


func print(x, y, msg: int*)
    while msg@ do
        sprite(x, y, 8, 8, msg@ % 32 * 8, (msg@ / 32 - 1) * 8, 0)
        x += 8
        msg += 1
    end
end


func box_intersect(ax, ay, aw, ah, bx, by, bw, bh)
    return ax < bx + bw and ax + aw > bx and
           ay < by + bh and ay + ah > by
end
func box_overlap_x(ax, ay, aw, ah, bx, by, bw, bh)
    if not box_intersect(ax, ay, aw, ah, bx, by, bw, bh) then return 0 end
    var d1 = bx + bw - ax
    var d2 = bx - (ax + aw)
    if abs(d1) < abs(d2) then return d1 else return d2 end
end
func box_overlap_y(ax, ay, aw, ah, bx, by, bw, bh)
    if not box_intersect(ax, ay, aw, ah, bx, by, bw, bh) then return 0 end
    var d1 = by + bh - ay
    var d2 = by - (ay + ah)
    if abs(d1) < abs(d2) then return d1 else return d2 end
end

